FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# ST Parking App API Document

+ API doc provider for ST Parking driver mobile app.

# Group Signup/Login

## Signup [/signup]

### Signup with mobile number [POST]

+ Request (application/json)

    + Attributes
        + mobile: +6591234567 (string, required)
            must includes country code
        + email: john@gmail.com (string, required)
        + password: password (string, required)
            must be at least 8 charactors

+ Response 201 (application/json)
    
    + Attributes
        + message: success (string, required)
        
+ Response 404

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "The account already exist"
            } 



## Mobile Login [/mobile-login]

### Login with mobile number [POST]

+ Request (application/json)

    + Attributes
        + mobile: +6591234567 (string, required)
            must includes country code
        + password: password (string, required)

+ Response 200 (application/json)
    
    - Attributes 
        - message: success
        - driver (Driver)

+ Response 404
    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "The account does not exist"
            }   

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Incorrect password"
            }
            
            

## Email Login [/email-login]

### Login with email [POST]

+ Request (application/json)

    + Attributes
        + email: john@gmail.com (string, required)
        + password: password (string, required)

+ Response 200 (application/json)
    
    - Attributes 
        - message: success
        - driver (Driver)

+ Response 404

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "The account does not exist"
            }   

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Incorrect password"
            }
    

## Account Verification [/verify{?mobile}]

### Resend Code [GET]

+ Parameters
    - mobile: +659123456 (string, required)

+ Response 200 (application/json)

    + Attributes
        + message: success (string, required)

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            }
            
            
### Code verification [POST]

+ Request (application/json)

    + Attributes
        + mobile: +659123456 (string, required)
        + code: 123231 (string, required)

+ Response 200 (application/json)

    + Attributes
        + message: success (string, required)



## Password Reset [/reset-password]

### Reset password [POST]
Temporary password will be sent to mobile with given mobile number

+ Request (application/json)
        
    + Attributes
        + mobile: john@gmail (string, required)
        
+ Response 200 (application/json)
    
    - Attributes 
        - message: success

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            }
            
            
            
# Group Driver Account

##  Driver profile management [/drivers/{driverCode}]

### Retrieve driver profile [GET]

+ Parameters
    + driverCode: "123" (string, required)
        
+ Request (application/json)
    
    + Headers

            Authentication: abeaieijfwefneoj123120w20323123

+ Response 200 (application/json)
    
    - Attributes
        - message: success
        - driver (Driver)
            
            

### Update driver profile [PUT]

+ Request (application/json)

    + Headers

            Authentication: abeaieijfwefneoj123120w20323123
        
    + Attributes
    
        + firstName: john (string)
        + lastName: smith (string)
        + email: john@gmail (string)
        + imageUrl: http://www.somewebside.com/image.jpg (string)
        + address (Address)
        
+ Response 200 (application/json)
    
    - Attributes 
        - message: success
        - driver (Driver)

+ Response 404
    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "The account does not exist"
            }   

+ Response 400
    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            } 
            
            
            

## Driver mobile number management [/drivers/{driverCode}/mobile]

### Update driver mobile number [PUT]

Mobile verification process will be kick in if success

+ Request (application/json)

    + Headers

            Authentication: abeaieijfwefneoj123120w20323123
        
    + Attributes
    
        + mobile: +6598767543 (string, required)
        
+ Response 200 (application/json)
    
    - Attributes 
        - message: success

+ Response 404

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "The account does not exist"
            }   

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            } 
            

## Driver password management [/drivers/{driverCode}/password]

### Update driver password [PUT]

+ Request (application/json)

    + Headers

            Authentication: abeaieijfwefneoj123120w20323123
        
    + Attributes
    
        + oldPassword: password (string, required)
        + newPassword: password1 (string, required)
        
+ Response 200 (application/json)
    
    - Attributes 
        - message: success

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            } 
            
            
            
            

# Group Carparks 
## Carparks [/carparks/{?lat}{?lng}]

### Retrieve nearby carparks [GET]

+ Parameters
    - lat: 1.33625 (number, required)
    - lng: 103.7442 (number, required)
        

+ Request (application/json)

    + Headers
    
            Authentication: abeaieijfwefneoj123120w20323123
                


+ Response 200 (application/json)
    
    * If current location is presented, the response result will sort by the distance from user's current location to the carparks

    - Attributes 
        - message: success
        - carparks (array[CarparkLive])
        
    - Body
            
            {
                "message": "success",
                "carparks": [
                    {
                        "address": {
                            "address": "100 Jurong East Street 21, Singapore 609602",
                            "postalCode": "609602"
                        },
                        "geopoint": {
                            "lat": 1.337327,
                            "lng": 103.744187
                        },
                        "carparkOwner": {
                            "idCode": "carpark1234",
                            "name": "ST Electronic"
                        },
                        "carparkCode": "NB13FD",
                        "id": "1",
                        "images": [
                            "https://resources.stuff.co.nz/content/dam/images/1/f/n/r/w/t/image.related.StuffLandscapeSixteenByNine.620x349.1fmsuh.png/1479862395932.jpg",
                            "https://resources.stuff.co.nz/content/dam/images/1/f/n/r/w/t/image.related.StuffLandscapeSixteenByNine.620x349.1fmsuh.png/1479862395932.jpg"
                        ],
                        "live": {
                            "availability": "open",
                            "availableLots": 115,
                            "rate": {
                                {
                                    "unitTime": 30,
                                    "vehicleType": "car",
                                    "cost": {
                                        "amount": 0.5,
                                        "currency": "sgd"
                                    }
                                },
                                {
                                    "unitTime": 30,
                                    "vehicleType": "motorcycle",
                                    "cost": {
                                        "amount": 0.2,
                                        "currency": "sgd"
                                    }
                                },
                                {
                                    "unitTime": 30,
                                    "vehicleType": "heavy vehicle",
                                    "cost": {
                                        "amount": 1.0,
                                        "currency": "sgd"
                                    }
                                }
                            },
                            "time": 1517280755
                        },
                        "name": "ST Electronics",
                        "openingHour": "Mon",
                        "carparkOperator": {
                            "idCode": "operator123ifjw",
                            "name": "ST Electronic"
                        },
                        "rate": "9:00AM - 10:00PM: SGD0.6/30Min",
                        "reservable": false,
                        "totalLots": 200,
                        "type": "close"
                    },
                    {
                        "address": {
                            "address": "50 Gambas Ave",
                            "postalCode": "609602"
                        },
                        "geopoint": {
                            "lat": 1.442445,
                            "lng": 103.818488
                        },
                        "carparkOwner": {
                            "idCode": "carpark1234",
                            "name": "Proxima at Gambas"
                        },
                        "carparkCode": "NB13FF",
                        "id": "2",
                        "images": [
                            "https://resources.stuff.co.nz/content/dam/images/1/f/n/r/w/t/image.related.StuffLandscapeSixteenByNine.620x349.1fmsuh.png/1479862395932.jpg",
                            "https://resources.stuff.co.nz/content/dam/images/1/f/n/r/w/t/image.related.StuffLandscapeSixteenByNine.620x349.1fmsuh.png/1479862395932.jpg"
                        ],
                        "live": {
                            "availability": "open",
                            "availableLots": 200,
                            "rate": {
                                {
                                    "unitTime": 30,
                                    "vehicleType": "car",
                                    "cost": {
                                        "amount": 0.5,
                                        "currency": "sgd"
                                    }
                                },
                                {
                                    "unitTime": 30,
                                    "vehicleType": "motorcycle",
                                    "cost": {
                                        "amount": 0.2,
                                        "currency": "sgd"
                                    }
                                },
                                {
                                    "unitTime": 30,
                                    "vehicleType": "heavy vehicle",
                                    "cost": {
                                        "amount": 1.0,
                                        "currency": "sgd"
                                    }
                                }
                            },
                            "time": 1517280755
                        },
                        "name": "Proxima at Gambas",
                        "openingHour": "Mon",
                        "carparkOperator": {
                            "idCode": "operator123ifjw",
                            "name": "Proxima at Gambas"
                        },
                        "rate": "9:00AM - 10:00PM: SGD0.6/30Min",
                        "reservable": false,
                        "totalLots": 200,
                        "type": "close"
                    },
                    {
                        "address": {
                            "address": "9 Nguy?n Trãi, Phu?ng Ph?m Ngu Lão, Qu?n 1, H? Chí Minh, Vietnam",
                            "postalCode": "112233"
                        },
                        "geopoint": {
                            "lat": 10.771100,
                            "lng": 106.693050
                        },
                        "carparkOwner": {
                            "idCode": "carpark134",
                            "name": "CirCO Nguyen Trai"
                        },
                        "carparkCode": "VN1232D",
                        "id": "1",
                        "images": [
                            "https://resources.stuff.co.nz/content/dam/images/1/f/n/r/w/t/image.related.StuffLandscapeSixteenByNine.620x349.1fmsuh.png/1479862395932.jpg",
                            "https://resources.stuff.co.nz/content/dam/images/1/f/n/r/w/t/image.related.StuffLandscapeSixteenByNine.620x349.1fmsuh.png/1479862395932.jpg"
                        ],
                        "live": {
                            "availability": "closed",
                            "availableLots": 115,
                            "rate": {
                                "car": {
                                    "unitTime": 30,
                                    "cost": {
                                        "amount": 0.5,
                                        "currency": "sgd"
                                    }
                                },
                                "motorcycle": {
                                    "unitTime": 30,
                                    "cost": {
                                        "amount": 0.2,
                                        "currency": "sgd"
                                    }
                                },
                                "truck": {
                                    "unitTime": 30,
                                    "cost": {
                                        "amount": 1.0,
                                        "currency": "sgd"
                                    }
                                }
                            },
                            "time": 1517280755
                        },
                        "name": "CirCO Nguyen Trai",
                        "openingHour": "Mon",
                        "carparkOperator": {
                            "idCode": "operator12fjw",
                            "name": "CirCO Nguyen Trai"
                        },
                        "rate": "9:00AM - 10:00PM: SGD0.6/30Min",
                        "reservable": false,
                        "totalLots": 200,
                        "type": "close"
                    }
                ]
            }

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            } 


## Carpark detail by id [/carparks/by-id/{carparkId}]

### Retrieve carpark info [GET]

+ Parameters
    + carparkId: 123 (number, required)
    
+ Request (application/json)

    + Headers

            Authentication: abeaieijfwefneoj123120w20323123
        

+ Response 200 (application/json)
    
    - Attributes 
        - message: success
        - carpark (CarparkLive)

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            } 


## Carpark detail by carpark code [/carparks/by-code/{carparkCode}]

### Retrieve carpark info [GET]

+ Parameters
    + carparkCode: ab123 (string, required)
    
+ Request (application/json)

    + Headers

            Authentication: abeaieijfwefneoj123120w20323123
        

+ Response 200 (application/json)
    
    - Attributes 
        - message: success
        - carpark (CarparkLive)

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            } 
            
## Carpark detail by name [/carparks/by-name/{carparkName}]

### Retrieve carpark info [GET]

+ Parameters
    + carparkName: HDB-W58 (string, required)
    
+ Request (application/json)

    + Headers

            Authentication: abeaieijfwefneoj123120w20323123
        

+ Response 200 (application/json)
    
    - Attributes 
        - message: success
        - carpark (CarparkLive)

+ Response 400

    - Attributes
        * errorMessage (string)
        
    - Body
    
            {
                "errorMessage": "Bad request."
            } 



#Group Parking

## Normal Parking - Open carpark [/parking]
### Create parking session [POST]
+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   
    + Attributes
        + carparkId: 214 (number, required)
        + vehicleNumber: SLA1234H (string, required)
        + startTime: 1517283500 (string, required)
        + duration: 60 (number, required)
            in mins
        + paymentInfo (object, required)
            + source: asf98asf7s7afasgklvkir35dgdg35mg  (string)
                this is stripeID from driver after selecting payment method
            + paymentGateWay: Stripe (string)
                Payment service: Stripe, Paypal, WechatPay...  


+ Response 200 (application/json)
    - Attributes (ParkingSession)
    

## Extend Parking - Open carpark [/parking/{parkingSessionCode}/extend]
### Extend parking session [PATCH]
Assume server captured last payment Strip id
+ Parameters
    - parkingSessionCode (string)

+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   
    + Attributes
        + duration: 60 (number, required)

+ Response 200 (application/json)
    - Attributes (ParkingSession)

## Complete Parking - Open carpark [/parking/{parkingSessionCode}/complete]
### Complete parking session [PATCH]
Server will need to perform the refund if necessary
+ Parameters
    - parkingSessionCode (string)

+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   
+ Response 200 (application/json)
    - Attributes (ParkingSession)  

## Current parking session for driver [/parking/by-driver]
### Get current parking session [GET]

+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
            
    + Attributes
        + driverCode: 123413 (string)

+ Response 200 (application/json)
    - Attributes (array[ParkingSession])
    
## Current parking session for vehicle [/parking/by-vehicle]
### Get current parking session [GET]

+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
            
    + Attributes
        + vehicleNumber: SLA1234H (string, required)
        
+ Response 200 (application/json)
    - Attributes (ParkingSession)
    
    
## Parking Payment [/parking/{parkingSessionId}/payment]
### Parking Payment [POST]
+ Parameters
    - parkingSessionId (string)

+ Request
    + Headers

            Content-Type: (application/json)
            Authorization: abcxyz

    + Attributes 
        + source: asf98asf7s7afasgklvkir35dgdg35mg  (string)
            this is stripeID from driver after selecting payment method
        + paymentGateWay: Stripe (string)
            Payment service: Stripe, Paypal, WechatPay... 

    
+ Response 200 (application/json)
    + Attributes (BillingItem)


+ Response 400
    - Attributes
        * errorMessage (string)
        

## Parking coupon  [/parking/{parkingSessionCode}/coupon]
### Update parking session [PATCH]
+ Parameters
    - parkingSessionCode (string)

+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
    
    + Attributes
        + coupon: ABC123 (string)
   
+ Response 200 (application/json)
    - Attributes (ParkingSession)  
    

#Group Season Parking

## Season parkings for driver [/drivers/{driverCode}/seasonparking]
### Get all season parkings for driver [GET]

+ Parameters
    - driverCode: 123 (string, required)
    
+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   

+ Response 200 (application/json)
    - Attributes (array[SeasonParking])
    
    
## Season parkings for vehicle [/vehicles/{vehicleNumber}/seasonparking]
### Get all season parkings for vehicle [GET]

+ Parameters
    - vehicleNumber: SLA1234H (string, required)
    
+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   

+ Response 200 (application/json)
    - Attributes (array[SeasonParking])
    
    
## Season parking application [/drivers/{driverCode}/seasonparking/applications]
### Create season parking application for driver [POST]

+ Parameters
    - driverCode (string)
    
+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   
    + Attributes (SeasonParkingApplicationForm)


+ Response 200 (application/json)
    - Attributes (SeasonParkingApplication)
    
### Get all season parking applications for driver [GET]

+ Parameters
    - driverCode (string)
    
+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   
    + Attributes


+ Response 200 (application/json)
    - Attributes (array[SeasonParkingApplication])

##  Application [/seasons/applications/{applicationCode}]

### Get Application detail [GET]
+ Parameters
    - applicationCode (string)

+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   
    + Attributes

+ Response 200 (application/json)
    - Attributes (SeasonParkingApplication)

### Update Application [PUT]

+ Parameters
    - applicationCode (string)

+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   
    + Attributes (SeasonParkingApplicationForm)


+ Response 200 (application/json)
    - Attributes (SeasonParkingApplication)
    

## Application Payment [/seasonparking/applications/{applicationCode}/payment]
### Make Payment [POST]
+ Parameters
    - applicationCode (string)

+ Request
    + Headers

            Content-Type: (application/json)
            Authorization: abcxyz

    + Attributes 
        + source: asf98asf7s7afasgklvkir35dgdg35mg  (string)
            this is stripeID from driver after selecting payment method
        + paymentGateWay: Stripe (string)
            Payment service: Stripe, Paypal, WechatPay... 

    
+ Response 200 (application/json)
    + Attributes
        + application (SeasonParkingApplication)
        + billing (BillingItem)
        

+ Response 400
    - Attributes
        * errorMessage (string)
    

#Group Transactions

## Transations [/drivers/{driverCode}/transactions{?page}{?from}{?to}{?type}{?vehicle}]
### Get transactions [GET]

+ Parameters
    - driverCode: 123 (string, required)
    - page: 1 (number, optional)
        + Default: 1
    - from: `2018-01-01` (string)
    - to: `2018-01-20` (string)
    - type: `normal` (string)
        + Members
            + `normal`
            + `season`
    - vehicle: 123 (string)
    
+ Request 
    + Headers
 
            Content-Type: (application/json)
            Authorization: abcxyz

+ Response 200 (application/json)
    - Attributes (array[Transaction])
    
## Transaction detail [/transactions/{transactionCode}]
### Get transaction detail [GET]

+ Parameters
    - transactionCode (string, required)
    
+ Request 
    + Headers
 
            Content-Type: (application/json)
            Authorization: abcxyz
            
+ Response 200 (application/json)
    - Attributes (Transaction)

#Group Vehicle

## Vehicles [/drivers/{driverCode}/vehicles]
### Create Vehicle [POST]

+ Parameters
    - driverCode (string, required)
+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
   
    + Attributes
        + vehicleType (enum, required)
            + Members
                + motorcycle
                + car
                + truck
        + vehicleNumber: SH6421 (string, required)


+ Response 200 (application/json)
    - Attributes (Vehicle)
    

### Get Vehicles [GET]
+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
  

+ Response 200 (application/json)
    - Attributes (array[Vehicle])
    
    + Body
    
            [
                {
                    "id": "1234",
                    "vehicleType": "car",
                    "vehicleNumber": "SH37394L"
                },
                {
                    "id": "2234",
                    "vehicleType": "motorcycle",
                    "vehicleNumber": "ER79U9D"
                },
                {
                    "id": "4423",
                    "vehicleType": "truck",
                    "vehicleNumber": "SUK3783G"
                }
            ]
    

## Modify Vehicle [/drivers/{driverCode}/vehicles/{vehicleId}]
### Update Vehicles [PATCH]
+ Parameters
    - driverCode (string, required)
    - vehicleId (number, required)
    
+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz
            
    + Attributes
        + vehicleType (enum)
            + Members
                + motorcycle
                + car
                + truck
        + vehicleNumber: SH6421 (string)
        
+ Response 200 (application/json)
    - Attributes (Vehicle)

### Delete Vehicles [DELETE]
+ Parameters
    - driverCode (string, required)
    - vehicleId (number, required)

+ Request
    + Headers
    
            Content-Type: (application/json)
            Authorization: abcxyz

+ Response 200 (application/json)
    - Attributes
            * message: Vehicle deleted (string)

#Group Messages

## Messages [/drivers/{driverCode}/messages]
### Get List Messages for driver [GET]

+ Parameters
    - driverCode (string, required)

+ Request 
    + Headers
 
            Content-Type: (application/json)
            Authorization: abcxyz
  
 
+ Response 200 (application/json)
    - Attributes (array[Message])
    
    + Body
    
            [
                {
                    "id": "1",
                    "imageUrl": "https://www.computerhope.com/jargon/e/error.gif",
                    "message": "Fail to pay the car park fee of ION Orchard",
                    "time": "2017-08-03 15:30:00Z",
                    "type": "attention",
                    "customData": {}
                },
                {
                    "id": "2",
                    "imageUrl": "https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX4598559.jpg",
                    "message": "Top Up $50 and get $10",
                    "time": "2017-08-03 17:30:00Z",
                    "type": "news",
                    "customData": {}
                }
            ]

## Message detail [/messages/{messageId}]
### Get Message [GET]

+ Parameters
   - messageId (string, required)

+ Request
   + Headers
   
            Content-Type: (application/json)
            Authorization: abcxyz

+ Response 200 (application/json)
   - Attributes (Message)

# Group E-Wallet

## Wallet info [/drivers/{driverCode}/wallet]
### Get Wallet Info [GET]

+ Parameters
   - driverCode (string, required)
   
+ Request
    + Headers

            Content-Type: (application/json)
            Authorization: abcxyz

+ Response 200 (application/json)
    - Attributes
        * balance (Money)
        * status: active (string)


## Stripe [/drivers/{driverCode}/wallet/stripe/ephemeral-keys]
### Get Stripe Ephemeral Key [POST]

+ Parameters
    - driverCode (string, required)
    
+ Request (application/json)
   
    + Headers
            
            Authorization: abcxyz
        
    + Attributes
        + api_version: v1.0 (string)

    + Body

            {
               "api_version":"v1.0"
            }

+ Response 200 (application/json)
    - Attributes (EphemeralKey)


## Top Up [/drivers/{driverCode}/wallet/topup]
### Top Up [POST]

+ Parameters
    - driverCode (string, required)
    
+ Request
    + Headers

            Content-Type: (application/json)
            Authorization: abcxyz

    + Attributes 
        + source: asf98asf7s7afasgklvkir35dgdg35mg  (string)
            this is stripeID from driver after selecting payment method
        + creditPack: CP123 (string)
            the credit pack driver want to topup
        + paymetnGateWay: Stripe (string)
            Payment service: Stripe, Paypal, WechatPay... 

    
+ Response 200 (application/json)
    - Attributes (BillingItem)

+ Response 400
    - Attributes
        * errorMessage (string)

## Credit Packs [/wallets/credit-packs]
### List all credit packs [GET]
+ Request
    + Headers

            Authorization: abcxyz


+ Response 200 (application/json)
    - Attributes 
        + data (array[CreditPack])

## Billing [/drivers/{driverCode}/wallet/billings/{?page}{?from}{?to}{?type}]

### Get billing history [GET]
+ Parameters
    - driverCode: 123 (string, required)
    - page: 1 (number, optional)
        + Default: 1
    - from: `2018-01-01` (string)
    - to: `2018-01-20` (string)
    - type: `normal` (string)
        + Members
            + `normal`
            + `season`
    
+ Request
    + Headers

            Authorization: abcxyz


+ Response 200 (application/json)
    - Attributes 
        + data (array[BillingItem])
        + pagination
            + currentPage: 1 (number)
            + nextPage: 2 (number)


## Billing detail [/drivers/{driverCode}/wallet/billings/{billingItemId}]
### Get billing detail [GET]

+ Parameters
    - driverCode (string, required)
    - billingItemId (string, required)

+ Request
    + Headers

            Authorization: abcxyz


+ Response 200 (application/json)
    - Attributes(BillingItem)


## Data Structures
### Driver
+ driverCode: abcd1234 (string, required)
+ mobile (Phone, required)
+ email: john@gmail.com (string, required)
+ firstName: John (string)
+ lastName: Smith (string)
+ imageUrl: `https://cdn.mpasho.co.ke/wp-content/uploads/2015/07/platon_photographer-president-barack-obama-portrait.jpg` (string)
+ address (Address)

### Phone
+ countryCode: +65 (string, required)
+ number: 91234567

### Address
+ address: 237 south bridge road (string)
+ postalCode: 123455 (string)

### GeoPoint
+ lat: 1.336254 (number, required)
+ lng: 103.7442 (number, required)

### CarparkOwner
+ idCode: carpark1234 (string, required)
+ name: CapitalLand (string)

### CarparkOperator 
+ idCode: operator123ifjw (string, required)
+ name: ST Electronic (string)

### Carpark
+ id: 123 (number, required)
+ carparkCode: NB13FD (string, required)
+ type (enum[string], required)
    + Members
        + `open` - open carpark without barriers
        + `closed` - closed carpark with barriers

    + Default: `open`
    
+ address (Address, required)
+ geopoint (GeoPoint)
+ name: suntec city mall (string)
+ images: https://resources.stuff.co.nz/content/dam/images/1/f/n/r/w/t/image.related.StuffLandscapeSixteenByNine.620x349.1fmsuh.png/1479862395932.jpg, https://resources.stuff.co.nz/content/dam/images/1/f/n/r/w/t/image.related.StuffLandscapeSixteenByNine.620x349.1fmsuh.png/1479862395932.jpg (array[string])
+ openingHour: "Mon-Sun, Public Holiday, Open 24 Hours" (string)
+ totalLots: 200 (number, required)
+ reservable: false (boolean)
+ carparkOwner (CarparkOwner)
    e.g. Carpark owner/Landlord
+ carparkOperator (CarparkOperator)
    Operator hired to operate the carpark, e.g. ST Technology
+ rate: "9:00AM - 10:00PM: SGD0.6/30Min" (string, required)

### CarparkLive (Carpark)
+ live (CarparkStatistic, required)

### CarparkStatistic
+ availability (enum[string], required)
    + Members
        + open - Carpark is currently open
        + closed - Carpark is currently closed
        
+ time: 1517280755 (number, required)
+ availableLots: 115 (number, required)
+ rate (Rate, required)


### Rate
+ unitTime: 30 (number, required)
+ vehicleType: car (string, required)
+ cost (Money, required)

### RateGroup
+ car (Rate)
+ motorcycle (Rate)
+ truck (Rate)

### Authorization
+ Authorization: access token

### SimpleUser
+ id: 2 (number)
+ name: Toan Nguyen (string)
+ profileImageUrl: `http://www.alansonsample.com/images/AlansonSample_Headshot.JPG` (string)


### BillingItem
+ id: 1 (number)
+ title: Billing title 1 (string)
+ amount: 10.0 (number)
+ type (enum[string])
    + Members
        + `topup`
        + `payment`
+ transaction (Transaction)
    Only applicable for `payment` type 
    
+ status: succeeded (enum[string])
    + Members
        + `on_hold` - Wait for the processing
        + `succeeded` - The transaction has succeeded
        + `refunded` - The credit was refunded into owner's wallet
        + `failed` - The transaction has failed
          
+ paymentMethod: `card` (enum[string])
    + Members
        + `card`
        + `wallet`
+ paymentMethodInfo: `VISA (1234)` (string)
+ package (object)
    can be anything associated to billing item. e.g. season parking payment, normal parking payment
+ createdAt: `2017-08-03 00:00:00Z` (string)
+ receiptTime: `2017-08-03 00:00:00Z` (string)


### DepositRequest
+ provider: stripe (enum[string])
    + Members
        + stripe 
+ orderCode: `abcxyz` (string)
+ source: `test_abcxxx` (string)
+ currency: SGD (string)
+ creditPack: 12341 (string)


### PaymentRequest
+ parkingId: `123` (number)
+ currency: SGD (string)
+ amount: 100.00 (number)

### RequestTransactionError
+ status: `not_enough` (enum[string])
    + Members
        + `not_enough` - Not enough balance
        + `wrong_password` - Wrong balance password
        + `unknown` - Unknown error
    
+ message: `Not enough balance, please top up`(string)


### EphemeralKeyAssociated
+ type: customer (string)
+ id: cus_BYQudWNpP7Ew6U (string)

### EphemeralKey
+ id: ephkey_1BBK2eCyHlrHgH8qpe0LN15A (string)
+ object: ephemeral_key (string)
+ associated_objects (array[EphemeralKeyAssociated])
+ created: 1507627728 (number)
+ expires: 1507631328 (number)
+ livemode: false (boolean)
+ secret: ek_test_YWNjdF8xQjk0VlZDeUhsckhnSDhxLHVPbkZOMnNEbEZaYTB1WHNrc1ZrelJBb3d3SjNxT3o (string)

### Vehicle
+ id: 1234 (number)
+ vehicleType: car (enum)
    + Members
        + motorcycle
        + car
        + truck
+ vehicleNumber: SH37394L (string)

### Transaction
+ id: 1234 (number, required)
+ session (ParkingSession, required)

### Message
+ id: 1234 (number)
+ type: news (enum[string])
    + Members
        + `news` - e.g. Announcement from company
        + `attention` - e.g. error on transactions
+ message: this is message (string)
+ imageUrl: http://image.png  (string)
+ time: `2017-08-03 00:00:00Z` (string)
+ customData (object)

### Money
+ amount: 10 (number, required)
+ currency: sgd (string, required)

### ParkingSession
+ idCode: 1234 (string, required)
+ carpark (Carpark, required)
+ vehicle (Vehicle, required)
+ startTime: 1514541600 (number, required)
+ endTime: 1515541600 (number)
+ duration: 30 (number)
    duration in min, omit if it is season parking
+ charge (Money)
    omit if it is season parking
+ coupon: ABF3515 (string)
    omit if it is season parking
+ type: `normal` (enum, required)
    parking type
    + Members
        + `normal` - this is the normal parking 
        + `season` - this is season parking
+ status: `inProgress` (enum[string], required)
    parking session status 
    + Members
        + `inProgress`- Parking is in progress
        + `paid` - Parking is already paid,not complete yet
        + `completed` - Parking is already complete paid and vehicle left the car park or driver manually completes the session (e.g open carpark use case)
            


### SimpleParking
+ idCode: 1234 (string)
+ carparkCode: 124 (string)
+ carparkName: Car Park1 (string)
+ vehicleId: 1234 (number)
+ vehicleNumber: SH2351J (string)
+ startTime: `2017-08-03 00:00:00Z` (string)
+ endTime: `2017-08-03 01:00:00Z` (string)
+ type: `normal` (enum[string])
    + Members
        + `normal` - this is the normal parking 
        + `season` - this is season parking

### SeasonParking
+ id: 123213 (number, required)
+ startDate: `2017-08-03` (string, required)
+ endDate: `2017-08-03` (string, required)
+ applicationId: 12352 (string)
+ vehicle (Vehicle, required)
+ carpark (Carpark, required)
+ driver (Driver)
+ renewable: false (boolean, required)
+ status: `active` (enum[string])
    + Members
        + `active` - season parking is currently active
        + `expired` - season parking is expired and need to extend the time


### SeasonParkingApplicationForm
+ carparkCode: 214 (string, required)
+ driverCode: 123 (string, required)
+ vehicleNumber: SLA1234H (string, required)
+ vehicleType  (enum, required)
    + Members
        + motorcycle
        + car
        + truck
+ startDate: `2017-08-03` (string, required)
+ endDate: `2017-08-03` (string, required)
+ fistName: John (string)
+ lastName: Stones (string)
+ finNumber: FN12414 (string)
+ email: john@user.com.sg (string, required)
+ phone: 651224291 (string, required)
+ address: 1 Eng Hoon St, Singapore 169753 (string)
+ postalCode: 150000 (string)
+ documentUrl: https://image-upload.com/document.png (string)
        
        
### SeasonParkingApplication
+ id: 1234 (number, required)
+ carpark (Carpark, required)
+ vehicle (Vehicle, required)
+ driver (Driver)
+ startDate: `2017-08-03` (string, required)
+ endDate: `2017-08-03` (string, required)
+ firstName: Frank (string)
+ lastName: Qiu (string)
+ finNumber: 3513 (string)
+ email: frank@user.com.sg (string, required)
+ mobile: 651351222 (string, required)
+ address: 1 Eng Hoon St, Singapore 169753 (string)
+ postalCode: 150000 (string)
+ documentUrl: http://www.alansonsample.com/images/AlansonSample_Headshot.JPG (string)
+ status: `pending` (enum[string], required)
    + Members
        + `pending` - application is in progress
        + `awaitPayment` - application is awaiting for payment
        + `approved` - application is already approved
        + `awaitClarification` - the `message` attribute will provide more information of what kind of clarification needed from applicant.
        + `rejected` - application is rejected
+ message: Please provide tanent agreement document for verification (string)

### CreditCard
+ cardNumber: 4343434343434343 (number, required)
+ cardName: Jhon Smith (string, required)
+ expiryDate: `2020-01-01` (string, required)
+ cvv: 111 (number, required)

### CreditPack
+ id: 1234 (number)
+ amount: 50.0 (number)
+ title: credit pack 1 (string)
+ currency: SGD (string)
+ discount: 5% (string)